
server.port=8002
spring.application.name=servicio-pedidos

# Registro en el servidor de eureka
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

# Configuracion de los parametros de CircuitBreaker
# pedidoscb es el identificador que vamos a utilizar en PedidosRest para crear el CircuitBreaker
# Vamos a dar un nombre a la configuracion que puede ser cualquiera (miconfig)
resilience4j.circuitbreaker.instances.pedidoscb.base-config=miconfig

# Vamos a lanzar 10 peticiones y cuando tengamos el 50% de errores entramos en estado abierto
resilience4j.circuitbreaker.configs.miconfig.sliding-window-size=10
resilience4j.circuitbreaker.configs.miconfig.failure-rate-threshold=50

# En estado abierto permanecera 20 segundos 
resilience4j.circuitbreaker.configs.miconfig.wait-duration-in-open-state=20s

# Desde el estado semi-abierto lanzamos una muestra de 5 peticiones con tasa de fallos del 50%
# Si de estas 5 peticiones, 3 o mas son erroneas volvemos a estado abierto
# Si son 2 erroneas o menos, entonces pasamos a estado cerrado
resilience4j.circuitbreaker.configs.miconfig.permitted-number-of-calls-in-half-open-state=5

# Configuracion de llamadas "lentas"
# Cuando se lanzan 10 peticiones y el 50% tarda mas de 2 segundos, pasa a estado abierto
resilience4j.circuitbreaker.configs.miconfig.slow-call-duration-threshold=2s
resilience4j.circuitbreaker.configs.miconfig.slow-call-rate-threshold=50

# Esto es para configurar el timeout, al igual que se hacia en Hystrix
# Ampliamos a 6 segundos la espera para evitar el timeout en todas las peticiones
resilience4j.timelimiter.instances.pedidoscb.base-config=miconfig
resilience4j.timelimiter.configs.miconfig.timeout-duration=6s

